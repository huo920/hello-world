

反射:

	什么是反射?
		反射是java提供的动态检查机制,动态的检查对象和类,
		分析出对象的类型,类的属性,类的方法,
		可以进一步动态加载类,动态创建对象,动态访问属性和方法
		
		反射是java提供的API
		
	利用反射检查对象的类型
		语法:
			Class cls = obj.getClass();
			//返回结果 cls 代表对象的类型
		List<String> list = new ArrayList<String>();
		Iterator<String> it = list.iterator();
		//it变量引用的对象是什么类型?
		//利用反射可以检查对象的类型 getClass()
		Class cls = it.getClass();
		System.out.println(cls);
		
	动态执行与静态执行
		反射的最大一个功能是提供了强大的动态执行功能
		静态执行:
			按照编译时候确定的顺序,在运行期间按照编译的结果执行
				Foo foo = new Foo();
				foo.test();
	
	动态执行
		在编译期间不能确定执行次序,在运行期间动态确定执行次序,
		动态加载类型,动态创建对象,动态访问属性和方法
		
	反射API执行动态执行
		
	动态加载类
		语法:
			Class cls = Class.forName(类名)
			
	动态获取类信息
	
	反射API的用途:可以"未卜先知"
		反射经常用于处理程序直接的耦合关系,实现松耦合,
		组件和组件之间是动态连接调用的,也就是运行期间动态加载,动态调用
		
		反射常用于"解耦"!
		
		经典面试题:
			Eclipse中动态的快捷键菜单利用什么技术实现的?
			答:利用反射技术动态获取类信息,加载到菜单中
			
		经典案例:
			实现一个类动态调用另外一个类中全部的以test为开头的无参数方法
			必须使用反射实现
			
			实现思路:
				1.动态加载类
				2.动态检查所有方法,检查以test为开头的方法
				3.动态创建对象
				4.动态调用方法
				
		面试题目:
			java中可以访问私有方法吗?
			答:一般情况下是不能直接访问的,但是使用反射API就可以了
			使用方法:method.setAccessible(true)
			
	动态访问属性
		访问方法:
			Object Field.get(对象)
			//读取对象的属性,返回属性的值
			
			void Field.set(对象,值)
			//设置对象的属性值为"值"
		
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
		