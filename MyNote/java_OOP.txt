Linun 的操作方式
		是操作系统，可以开发Java，开源的
		绝对  相对路径
		pwd  cd   .:当前路径   ..:返回上一级
		运行某个程序  只需要写出完整路径即可

		1、不带图形界面   真正的服务器上的
		2、带图形界面的

Java 开发环境
1、
	编译期
	运行期
2、
	JVM  java虚拟机
	JRE  运行环境  jre = jvm + java系统类库
	JDK  Java开发环境

3.Java开发环境:
  1)Java编译运行过程:----------常见面试题
    1.1)编译期:.java源文件，经过编译，生成.class字节码文件
	1.2)运行期:JVM加载.class并运行.class
	特点:跨平台，一次编程到处使用
  2)名词解释:-------------------常见面试题
    2.1)JVM:java虚拟机
	        加载.class并运行.class
	2.2)JRE:java运行环境
	        除了包含JVM以外，还包含了运行java程序所必须的环境
            JRE=JVM+java系统类库
	2.3)JDK:java开发工具包
	        除了包含JRE以外，还包含了开发java程序所必须的命令工具
			JDK=JRE+编译、运行等命令工具
  3)配置环境变量----------------了解
    3.1)JAVA_HOME:指向jdk的安装目录
	3.2)CLASSPATH:表示类的搜索路径，一般简写为.
	3.3)PATH:指向jdk下的bin目录
	
一、变量
	在内存中所开辟的存储空间
		1、声明  int a  int a=0;    int a,b=2;  int c=1,d=2;
		2、命名	字母 数字 _  $  不能数字开头 区分大小写 不能使用关键字 中文（不）
				驼峰命名法（变量）  
				帕斯卡命名法（类名）
		3、初始化  第一次赋值 
				声明同时初始化  int a=5; 先声明后初始化int a; a=5;
		4、使用  存取 操作 
				对变量的使用就是对他所存的那个数的使用
				int a=5;
				int b = a + 10;
				变量的使用必须与数据类型匹配
				变量在使用之前必须声明并初始化



二、八种基本数据类型
		目的 ：满足不同人的不同的需求
		整数 
			byte 	1个字节 
			short	 2个字节 
			int	 4个字节 （-2148473648 ，2148473647）
				直接量超范围是编译错误 运算超范围是溢出
			long	 8个字节   
				末尾加L  运算时有可能溢出，为了避免溢出，在第一个数字后加L（BigInteger 无穷大）
				long time = System.currentTimeMillis();获取自1970.1.1.00到此时此刻的毫秒数
		浮点 
		   精确运算场合不适用，用BigDecimal类实现
			float 4个字节 
				在数字后加f
			double 8个字节 
				默认  有可能会出现误差 
		char 2个字节
			1、采用Unicode编码格式，一个字符对应一个码，表现形式是字符char， 但实质上是码int
			2、ASCII('a'97  'A'65  '0'48)
				char = 97;   //0到65535
				16位的无符号的整数
			3、放在单引号里，只能有一个
			4、特殊字符需要通过\转义
		boolean 1个字节
			只能存储true 和 false
		  


三、基本数据类型之间的转换
		从小到大为byte short/char int long float double
		1、两种方式
				1.1）自动类型转换：小类型到大类型
				1.2）强制类型转换：大类型到小类型  (强转有可能溢出、丢失精确度)
				语法： （要转换成为的数据类型） 变量名 
		2、两点规则
				2.1）整数直接量可以直接赋值给byte short char 但不能超出范围
				2.2）byte short char 型数据参与运算时，先一律转换位int在运算

四、Scanner的用法
		1、在package下面
				import.java.util.Scanner;
		2、在main方法中  
			Scanner scan = new Scanner(System.in);
		3、在第二步之下写
			System.out.println("提示")；
			int age = scan.nextInt();
			System.out.println("提示")；
			double price = scan.nextDouble();

给变量赋值有三种方式
		1、赋一个固定的值
			int a = 5；
		2、接受用户输入的值    Scanner
			int a = ？；
		3、系统随机生成的值    



1、运算符
   1.1算数运算符
		+ - * / % ++ --
		1)% 取模 
		2）++ 
		   1、单独使用没有区别
		   2、被使用的时候
			  a++  的值为  a
			  ++a  的值为  a+1
  1.2关系运算符（一个条件控制）boolean型
		> < <= >= == !=	
  1.3逻辑运算符（多个条件控制）
		&&逻辑与  两边为真则为真，见false则false 
		（短路与）第一个为false时，发生短路（后面的不执行了）
		||逻辑或      两边为假则为假 ，见true则true（短路）
		！逻辑非
		建立在关系运算之上的，结果为boolean型
		
  1.4赋值运算符
		1）简单赋值运算符：=
		2）扩展赋值运算符：+= -+ *= /= %=
  1.5字符串连接运算符
		1）+
		   1.1）两边都是数字，则做加法运算
		   1.2）两边若是出现字符串，则做连接
  1.6三目运算符
		1）语法
				boolean ?  a ： b     结果为 a（true）或b（false）
				a > b ? a : b
		2）执行过程
				计算boolean的值
						若为true，整个结果为a
						若为false，整个结果为b
		3)三目的嵌套				
2、逻辑结构
		1）顺序结构
		2）分支结构（有条件的去执行某条语句）
			  2.1if...
			  2.2if...else...
			  2.3if...else if...		多条路
			  2.4switch...case...		多条路
					优点 ： 效率高、结构清晰
					缺点 ： 整数、相等
					当缺点不在是缺点的时候，他是首选
					整数（byte short int char )  、字符串
					
  	   3）循环结构
				1.循环:反复执行一段相同或相似的代码
				2.循环三要素:
				  1)循环变量的初始化
					  2)循环的条件(以循环变量为基础)
					  3)循环变量的改变(向着循环的结束变)
					  循环变量:在整个循环过程中所反复改变的那个数
				3.循环结构:
					  1)while:先判断后执行，有可能一次都不执行
					  2)do...while:先执行后判断，至少执行一次
								   要素1与要素3相同时，首选do...while
					  3)for:应用率高，固定次数循环
				4.break:跳出循环
						continue:跳过循环体中剩余语句而进入下一次循环

				嵌套循环
				循环中套循环，一般多行多列使用，外层控制行，内层控制列
				执行规则为：外层走一次，内层走所有次
				建议：嵌套越少越好，不要超过三层
				break:只跳出一层循环

	程序=算法+数据结构
		1）算法：解决问题的流程、步骤（顺序、分支、循环）
		2）数据结构：将数据按照某种特定的结构来保存
								数怎么存
								设计良好的、合理的数据结构会形成好的算法

数组
		1）相同数据类型元素的集合
		2）数组是一种数据类型（引用类型）
		3）数组 的声明
				int[] arr = new int[4];
		4 ) 数组的初始化：
				int[] arr = new int[4];
				int[] arr  = {1,2,3};       //声明同时初始化
				int[] arr = new int[]{1,2,3}
		5）数组的访问：
			1）通过（数组名.length）可以获取数组的长度
			2 ) 通过下标访问数组中的元素
		6）数组的遍历
		7 ) 数组的复制
				Arrays.copyOf（）
				System.arraycopy（原数组，原数组开始位置，目标数组，目标位置，复制原数组的长度）
				数组的排序Arrays.sort(arr)  升序
				插入、冒泡、快速排序
				不同的数据选择
		8）冒泡算法
				1）四个数冒三轮
						每一轮都是从第一个元素开始冒
						每一次都是和下一个元素比较
						冒出来之后就不用比较了


方法
	1、方法
		1）封装一段特定的业务逻辑功能
		2）方法尽可能的独立，一个方法只干一件事
		3）反复调用多次
		4）减少代码重复，有利于维护
	2、方法的定义	
			修饰词	 返回值数据类型  方法名  （参数列表）｛方法体｝
	3、方法的调用	
			return 值 ; 返回一个结果给调用方  
			return;结束方法的执行  
			方法的嵌套调用
	
	
	
	
	
	
	
	猜 字符小游戏
	一数据结构  变量
		1）char[] chs
		2) char [] input
		3)int [] result
		4)int score
二 设计程序结构  方法
		1、主函数
		2、生成随机字符数组
		3、对比	：两个数组	
		
三 设计算法	
		
	
	
	String 三个方法
	
	
	
	
	常用500字练习
	
	我 人 有 的 和  主 产 不 为 这 
	工 要 在 地 一 上 是 中 国
	    经 以 发  了 民 同
		
		
面向过程	
面向对象（OO）
	OOA面向对象分析
	OOD面向对象设计
	OOP面向对象编程
	
	1.什么是类？什么是对象？
			1、现实世界是由很多很多对象组成的
					基于对象抽出类
			2、对象就是真实存在的单个个体
					类  类别/类型，代表一类个体
			3、类中可以包含
					所有对象所共有的属性和特征   成员变量
					所有对象所共有的行为   方法
				
			4、一个类可以创建多个对象
					同一类型的多个对象，结构相同，数据不同	
			5、类是对像的模板，对象是类的具体的实例
				
	2.如何创建类？如何创建对象？如何语言访问成员？
	3.画等号
		1、引用类型之间画等号
			指向同一个对象
			对其中一个引用的修改会影响另一个引用（对象只有一个）
			
	   2、基本类型之间画等号
			赋值
			对其中一个变量的赋值会改变另外一个变量（数据是两个）
	4.null和NullPointerException
		null         空，没有指向任何对象
				若引用的值为null，则该引用不能进行任何操作
				否则会出现NullPointerException
	
	
	
	1、方法的重载overload方法签名，与返回值类型无关
			发生在同一个类中，方法民称相同，参数列表不同
			编译器在编译时会根据方法的签名自动绑定方法
			一个文件中可以有多个类
			public修饰的类只能有一个
			public修饰的类必须与文件名相同
	2、构造方法	
			1、方法名和类名相同，没有返回值类型
			2、给变量赋初值
			3、在创建(new)对象时被自动调用
			4、若自己不写构造方法，则编译器默认一个无参数的构造方法
					若自己写了，则调用自己写的，且不再提供默认的构造方法
			5、可以重载		
	3、this：指代当前对象，哪个对象调用方法，
			只能用在方法中，方法中访问成员变量之前默认有个this.
			this的用法;
					1.	this.成员变量        访问成员变量
					2.this.方法名（）      调用方法
					3.this（）                 调用构造方法
	4、引用类型数组
	
	

	成员 变量（堆）局部变量（栈）中
	当成员变量和局部变量同名时，this不能省略
	
	
	引用类型数组
	
	继承（泛化）
	
		1）作用：实现代码的复用
		2）通过extends实现
		3）父类  ： 所有子类所共有的属性和方法
				子类：子类特有的属性和行为
		4）子类继承父类后，子类具有：子类+父类
		5）一个父类可以有多个子类
				一个子类只能有一个父类（单一继承）
		6）继承具有传递性		
		7）规定：构造子类之前必须先构造父类
				在子类中如果不调用父类的构造，则默认使用super调用父类的构造，
				若调用了，就不提供默认的
		
	super:指代当前对象的父类对象
				用法
				1）super.成员变量名----------访问父类的成员变量
				2）super.方法名（） ---------调用父类的方法
				3）super（） ----------------调用父类的构造方法
	向上造型
			1）父类型的引用指向了子类的对象
			2）规定：能点出来什么，看引用的类型
	
	
	
	1.方法的重写
			重新写，覆盖
			1）发生在父子类中，方法名称相同，参数列表相同，方法体不同
			2）重写方法被调用时，看对象的类型，一般运行的是子类重写的版本
		（两同两小一大）
				1）方法名称相同，参数列表相同
				2）两小：
								子类方法的返回值类型小于或等于父类的
										void时，返回值类型必须相同,基本类型也是必须相同
										引用类型小于或等于
								子类抛出的异常小于或等于父类的
				3）一大：子类方法的访问权限大于或等于父类的
	2.重写与重载的区别
			重写
					发生在父子类中，方法名称相同，参数列表相同，方法体不同
					遵循运行期绑定，看对象的类型来调用方法
					
			重载
					发生在同一个类中，方法名称相同，参数列表不同，方法体不同
					遵循编译期绑定，看引用的类型来绑定方法
	
	3.package：
			域名的反写 .  项目名称 . 模块名称 . 类名
			作用：避免类的命名冲突
			类的全称：包名.类名
			包名可以有层次结构，同包中的类不能同名
			建议：包名所有字母都小写
	import
			同包中的类可以直接访问，不同包中的类不能直接访问
			若想访问有如下两种方式：
					1.先import声明类再使用
					2.类的全称----------不建议
			
	
	
	4.访问控制修饰符
			数据私有化，行为（方法）公开化
			public					公开的，任何类
			private					私有的，本类
			protected			   本类、同包类和子类
			默认的                 本类、同包类
			类的访问修饰符：public  默认的
					类中成员的访问修饰符四个都可以
					
			
	
	5.内存管理：由jvm管理的
			堆）
				1）	存储所有new出来的对象（包含成员变量）
				2）	没有任何引用所指向的对象为垃圾
						垃圾回收器（GC）不定时到内存中清扫垃圾
						回收过程是透明的，
						但不一定一发现垃圾就立即回收，
						调用System.gc（）建议JVM尽快调度GC来回收垃圾
				3）	内存泄露:不在使用的内存，还没有被及时的回收
						建议：不再使用的对象及时将引用设置为null
				4）   成员变量的生命周期：创建对象时存在堆中，对象被回收时一并消失
			栈）
				1）存储正在调用中的方法中的所有局部变量（包括参数）
				2）调用方法时，在栈中为该方法分配一块对应的栈帧，
						栈帧中存储的是所有的局部变量（包括参数）、
						方法调用结束时，栈帧被清除，局部变量一并失效
				3）局部变量的生命周期：
						调用方法时存在栈中，调用结束时与栈帧一同清除
			方法区
				1）存放类的信息，存储的是.class字节码文件，包括方法
				2）方法只有一个，通过this来区分具体位置
			
			成员变量：
					类中，方法外
					创建对象时存在堆中，对象被回收时一并消失
					有默认值
					分成两种：
						1）实例变量：没有static修饰，属于对象，存储在堆中
												有几个对象就有几份
												对象.来访问
						2）静态变量：由static修饰，属于类的，存储在方法区中，
												只有一份
					
					
			局部变量
					方法中
					调用方法时存在栈中，调用结束时与栈帧一同清除
					无默认值
	
	6.static
				1）静态变量：
						由static修饰
						属于类的，存储在方法区中，只有一份
						类名.来访问
						何时用：所有对象所共享的资源（图片、音频、视频等）
				2）静态方法
						由static修饰
						属于类的，存储在方法区中，只有一份
						类名.来访问
						静态方法没有隐式（this）
						静态方法中不能直接访问实例成员
						何时用：方法的操作仅与参数相关而与对象无关（所有对象调出来结果都一样，即与对象无关）
						
				3）静态块
						1）由static修饰
						2）属于类的，在类被加载时自动执行
								因为类中被加载一次，所以静态块只执行一次
						3)何时用：加载/初始化静态资源（图片、音频、视频等）		
	
	final
			最终的、不可改变的---------单独使用几率很小
			修饰变量：变量不能被改变
					修饰成员变量，两种初始化方法：
						1）声明同时初始化
						2)构造方法中初始化
					修饰局部变量，只要在用之前初始化即可	
			修饰方法：方法不能被重写
			修饰类：该类不能被继承，但是能继承别人
	
	static  final -----------常量，应用率高
	1）必须声明同时初始化
	2）不能被改变的，通过类名点来访问
	3）建议：常量名所有字母都大写，多个单词用下划线_分隔
	4）编译器在编译时直接将常量替换为具体的值，效率高
	
	
	
	
	抽象意味着不完整
	 
	抽象方法
		1）由abstract 修饰
		2）只有方法的定义，没有方法的具体实现（连｛｝都没有）
	
	抽象类
		1.由abstract 修饰
		2.包含抽象方法的类必须是抽象类
			不包含抽象方法的类也可以是抽象类，但是纯属自己乐意
		3.抽象类不能被实例化
		4.抽象类是需要被继承的，一定有子类
				重写所有抽象类------------一般常规办法
				也声明为抽象类------------不常用
		5.抽象类的意义：
				1）封装子类共有的属性和行为-------------代码复用
				2）为所有的子类提供一种统一的类型------向上造型
				3）可以包含抽象方法，为所有子类提供一个统一的入口
						子类的实现不同，但入口是一致的
	
	
	接口---------------制定标准、规范,完全抽象的抽象类
				1.是一个标准、规范---------------------------制定方
					遵守了这个标准，就能干某件事-------------API
				2.接口也是一种数据类型（引用类型）
				3.interface定义	
				4.只能包含常量和抽象方法-------------默认的public static final/abstract
				5.接口不能被实例化
				6.接口是需要被实现的，实现类：
						必须重写接口中的所有抽象方法（public)
				7.一个类可以实现多个接口，用逗号隔开
						若又继承又实现时，应先继承后实现
				8.接口可以继承接口		
	
	多态
		1.意义
			1.1同一类型的引用，指向不同对象时，有不同的实现
					--------------行为的多态cut（）
			1.2同一个对象，被造型为不同类型时，有不同功能 
					---------------对象的多态：我，你，水...
		2.向上造型（自动类型转换）：
				父类型的引用指向子类的对象
				能造型成为的类型：父类+所有实现的接口
				能点出来什么，看引用的类型
		3.强制类型转换：大类型到小类型，成功的条件只有两种：
				1）引用所指向的对象，就是该类型
				2）引用所指向的对象，实现了该接口
		4.强转若不符合以上两个条件，则发生ClassCastException异常
				建议：在强转之前先使用instanceof来判断引用指向的类型   
		
	
	成员内部类
		1.	类中套类，外面的称为Outer外部类，里面的称为Inner内部类
		2.内部类通常只服务外部类，对外不具备可见性
		3.内部类对象通常只在外部类中创建
		4.内部类可以直接访问外部类的成员（包括私有的）
				在内部类中有个隐式的引用指向创建它的外部类对象 
						外部类名.this
		
		
	匿名内部类
		1.若想创建一个类（子类）的对象，并且对象只被创建一个，此时该类不必命名，称之为匿名内部类
		2.在内部类中访问外部的变量，该变量必须是final的
		内部类有独立的  .class文件（Mama$Baby.class  ,  外部类名$1.class）
		
		
	面向对象总结
			三大特征：
				封装
						类：封装的是对象的属性和行为
						方法：封装的是具体的业务逻辑实现
						访问控制修饰符：封装的是访问的权限
				继承
						作用：实现代码的复用
						父类/基类：共有的属性和行为
						子类/派生类：特有的属性和行为
						子继承父类之后，子具有：父+子
						传递性：单一继承、多接口实现
				多态
						意义：行为（抽象方法）的多态、对象的多态
						向上造型、强制类型转换、instanceof判断
						多态的表现形式：
							重写：根据对象来多态
							重载：根据参数来多态
						
		
	
1）找对象
	2）抽类
	3）设计类中的成员变量和方法
	4）设计测试类
	
设计规则：

1）将共有的属性和行为，抽象到父类中	
2） 所有的子类行为一样的时候，设计为普通方法
		不一样的时候，设计为抽象方法
3）部分子类共有的行为，抽象到接口中
		符合即是也是原则时，使用接口
		接口是对单继承的扩展
		接口是对继承单根性的扩展（多继承）

	
	
	
	
	

	
	interface  interface interface 
	abstract
	abstract
	abstr
	Lenovo
	
	
	
	
	
	
	
	加载class文件的原理机制
	查找和装入类文件中的类
	
	classloader
	
子类A继承了父类B，A a = new A();则执行顺序是：
①父类B静态代码块④子类A静态代码块②父类B非静态代码块③父类B构造函数⑤子类A非静态代码块⑥子类A的构造函数
 .①->④->②->③->⑤->⑥

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

